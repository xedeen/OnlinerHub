<Application
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:phone="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone"
    xmlns:shell="clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone"
    xmlns:converters="clr-namespace:NewsHub.Converters"
    xmlns:selectors="clr-namespace:NewsHub.Selectors"
    xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:toolkit="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit"
    xmlns:toolkitPrimitives="clr-namespace:Microsoft.Phone.Controls.Primitives;assembly=Microsoft.Phone.Controls.Toolkit"
    x:Class="NewsHub.App"
    >

    <!--Application Resources-->
    <Application.Resources>
        <local:LocalizedStrings xmlns:local="clr-namespace:NewsHub" x:Key="LocalizedStrings"/>

        <converters:BoolToVisibilityConverter x:Key="BoolToHiddenConverter" TrueValue="Visible" FalseValue="Collapsed" />
        <converters:TextTrimmer x:Key="TextTrimmer" />
        <selectors:FeedTemplateSelector x:Key="FeedTemplateSelector" />
        <selectors:FeedBackGroundSelector x:Key="FeedBackGroundSelector" />

        <system:Double x:Key="PivotItemHeaderFontSize">28</system:Double>
        <system:Int32 x:Key="HeaderLen">73</system:Int32>
        <system:Int32 x:Key="HeaderLenClear">100</system:Int32>
        <system:Int32 x:Key="DescLen">108</system:Int32>
        <system:Int32 x:Key="DescLenClear">164</system:Int32>


        <DataTemplate x:Key="NoTitleTemplate"/>

        <DataTemplate x:Key="FeedItemTemplateRich">
            <Grid Width="400" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0" Background="{StaticResource PhoneAccentBrush}">
                    <TextBlock Foreground="{StaticResource PhoneBackgroundBrush}" Text="{Binding PublishDateS}"/>
                </StackPanel>
                <Image VerticalAlignment="Stretch" CacheMode="BitmapCache" Grid.Row="1">
                    <Image.Source>
                        <BitmapImage UriSource="{Binding ImageUri}" CreateOptions="BackgroundCreation"/>
                    </Image.Source>
                </Image>
                <StackPanel Grid.Row="2" Margin="0,0,0,20">
                    <StackPanel.Background>
                        <SolidColorBrush Color="#faf7ee" Opacity="1"/>
                    </StackPanel.Background>
                    <TextBlock Text="{Binding TitleU, ConverterParameter={StaticResource HeaderLen}, Converter={StaticResource TextTrimmer}}" TextWrapping="Wrap" Margin="5,0,5,8" 
        				Foreground="{StaticResource PhoneBackgroundBrush}" Style="{StaticResource PhoneTextTitle2Style}" FontSize="{StaticResource PhoneFontSizeNormal}" FontWeight="Bold" />
                    <TextBlock Text="{Binding Description, ConverterParameter={StaticResource DescLen}, Converter={StaticResource TextTrimmer}}" TextWrapping="Wrap" Margin="15,0,0,15" 
        				Foreground ="{StaticResource PhoneBackgroundBrush}" Style="{StaticResource PhoneTextNormalStyle}" FontSize="{StaticResource PhoneFontSizeSmall}"/>
                </StackPanel>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="FeedItemTemplateClear">
            <Grid Width="400" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0" Background="Beige">
                    <TextBlock Foreground="{StaticResource PhoneBackgroundBrush}" Text="{Binding PublishDateS}"/>
                </StackPanel>
                <StackPanel Grid.Row="1" Margin="0,0,0,20">
                    <StackPanel.Background>
                        <SolidColorBrush Color="#faf7ee" Opacity="1"/>
                    </StackPanel.Background>
                    <TextBlock Text="{Binding TitleU, ConverterParameter={StaticResource HeaderLenClear}, Converter={StaticResource TextTrimmer}}" TextWrapping="Wrap" Margin="5,0,5,8" 
        				Foreground="{StaticResource PhoneBackgroundBrush}" Style="{StaticResource PhoneTextTitle2Style}" FontSize="{StaticResource PhoneFontSizeNormal}" FontWeight="Bold" />
                    <TextBlock Text="{Binding Description, ConverterParameter={StaticResource DescLenClear}, Converter={StaticResource TextTrimmer}}" TextWrapping="Wrap" Margin="15,0,0,15" 
        				Foreground ="{StaticResource PhoneBackgroundBrush}" Style="{StaticResource PhoneTextNormalStyle}" FontSize="{StaticResource PhoneFontSizeSmall}"/>
                </StackPanel>
            </Grid>
        </DataTemplate>



        <Style x:Key="PivotItemHeaderTextStyle" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="{StaticResource PhoneFontFamilySemiLight}"/>
            <Setter Property="FontSize" Value="{StaticResource PivotItemHeaderFontSize}"/>
            <Setter Property="CharacterSpacing" Value="-35"/>
        </Style>
        <Style x:Key="LongListMultiSelectorItemListStyle" TargetType="toolkit:LongListMultiSelectorItem">
        	<Setter Property="Background" Value="{StaticResource PhoneAccentBrush}"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="toolkit:LongListMultiSelectorItem">
        				<Grid MinHeight="52">
        					<Grid.Resources>
        						<ExponentialEase x:Key="ExponentialEaseIn" EasingMode="EaseIn" Exponent="8"/>
        						<QuadraticEase x:Key="QuadraticEaseOut" EasingMode="EaseOut"/>
        					</Grid.Resources>
        					<VisualStateManager.VisualStateGroups>
        						<VisualStateGroup x:Name="SelectionEnabledStates">
        							<VisualStateGroup.Transitions>
        								<VisualTransition x:Name="ClosedToExposed" From="Closed" GeneratedDuration="0:0:0.30" To="Exposed">
        									<Storyboard>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OuterHintPanel">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource QuadraticEaseOut}" KeyTime="0:0:0.0" Value="0.0"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource QuadraticEaseOut}" KeyTime="0:0:0.30" Value="1.0"/>
        										</DoubleAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualTransition>
        								<VisualTransition x:Name="ExposedToClosed" From="Exposed" GeneratedDuration="0:0:0.30" To="Closed">
        									<Storyboard>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OuterHintPanel">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource QuadraticEaseOut}" KeyTime="0:0:0.0" Value="1.0"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource QuadraticEaseOut}" KeyTime="0:0:0.30" Value="0.0"/>
        										</DoubleAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualTransition>
        								<VisualTransition x:Name="ExposedToOpened" From="Exposed" GeneratedDuration="0:0:0.30" To="Opened">
        									<Storyboard>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="SelectBox">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.0" Value="-58"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.15" Value="0"/>
        										</DoubleAnimationUsingKeyFrames>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Presenter">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.0" Value="24"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.15" Value="86"/>
        										</DoubleAnimationUsingKeyFrames>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OuterHintPanel">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource QuadraticEaseOut}" KeyTime="0:0:0.0" Value="1.0"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource QuadraticEaseOut}" KeyTime="0:0:0.30" Value="0.0"/>
        										</DoubleAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectBox">
        											<DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="Visible"/>
        										</ObjectAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="OuterHintPanel">
        											<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False"/>
        										</ObjectAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="InnerHintPanel">
        											<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False"/>
        										</ObjectAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualTransition>
        								<VisualTransition x:Name="ClosedToOpened" From="Closed" GeneratedDuration="0:0:0.15" To="Opened">
        									<Storyboard>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="SelectBox">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.0" Value="-58"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.15" Value="0"/>
        										</DoubleAnimationUsingKeyFrames>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Presenter">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.0" Value="24"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.15" Value="86"/>
        										</DoubleAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectBox">
        											<DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="Visible"/>
        										</ObjectAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="OuterHintPanel">
        											<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False"/>
        										</ObjectAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="InnerHintPanel">
        											<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False"/>
        										</ObjectAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualTransition>
        								<VisualTransition x:Name="OpenedToClosed" From="Opened" GeneratedDuration="0:0:0.15" To="Closed">
        									<Storyboard>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="SelectBox">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.0" Value="0"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.15" Value="-58"/>
        										</DoubleAnimationUsingKeyFrames>
        										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Presenter">
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.0" Value="86"/>
        											<EasingDoubleKeyFrame EasingFunction="{StaticResource ExponentialEaseIn}" KeyTime="0:0:0.15" Value="24"/>
        										</DoubleAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectBox">
        											<DiscreteObjectKeyFrame KeyTime="0:0:0.15" Value="Collapsed"/>
        										</ObjectAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualTransition>
        							</VisualStateGroup.Transitions>
        							<VisualState x:Name="Closed"/>
        							<VisualState x:Name="Exposed">
        								<Storyboard>
        									<DoubleAnimation Duration="0" To="1.0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OuterHintPanel"/>
        								</Storyboard>
        							</VisualState>
        							<VisualState x:Name="Opened">
        								<Storyboard>
        									<DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="SelectBox"/>
        									<DoubleAnimation Duration="0" To="86" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Presenter"/>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectBox">
        										<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible"/>
        									</ObjectAnimationUsingKeyFrames>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="OuterCover">
        										<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible"/>
        									</ObjectAnimationUsingKeyFrames>
        									<DoubleAnimation Duration="0" To="0.0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OuterHintPanel"/>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="OuterHintPanel">
        										<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False"/>
        									</ObjectAnimationUsingKeyFrames>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="InnerHintPanel">
        										<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False"/>
        									</ObjectAnimationUsingKeyFrames>
        								</Storyboard>
        							</VisualState>
        						</VisualStateGroup>
        					</VisualStateManager.VisualStateGroups>
        					<Grid HorizontalAlignment="Stretch">
        						<Grid.ColumnDefinitions>
        							<ColumnDefinition Width="*"/>
        							<ColumnDefinition Width="Auto"/>
        						</Grid.ColumnDefinitions>
        						<Grid Grid.Column="0" HorizontalAlignment="Stretch" toolkitPrimitives:ClipToBounds.IsEnabled="True">
        							<ContentPresenter x:Name="Presenter">
        								<ContentPresenter.RenderTransform>
        									<CompositeTransform TranslateX="24"/>
        								</ContentPresenter.RenderTransform>
        							</ContentPresenter>
        						</Grid>
        						<Rectangle x:Name="InnerHintPanel" Grid.Column="0" Fill="Transparent" HorizontalAlignment="Left" Height="{TemplateBinding HintPanelHeight}" StrokeThickness="0" Width="24">
        							<Rectangle.RenderTransform>
        								<CompositeTransform TranslateX="24"/>
        							</Rectangle.RenderTransform>
        						</Rectangle>
        						<ContentControl x:Name="InfoPresenter" ContentTemplate="{TemplateBinding ContentInfoTemplate}" Content="{TemplateBinding ContentInfo}" Grid.Column="1" VerticalAlignment="Top"/>
        					</Grid>
        					<Rectangle x:Name="OuterHintPanel" Fill="{TemplateBinding Background}" HorizontalAlignment="Left" Height="{TemplateBinding HintPanelHeight}" Opacity="0.0" StrokeThickness="0" Width="24"/>
        					<Grid x:Name="OuterCover" Background="Transparent" IsHitTestVisible="True" Visibility="Collapsed"/>
        					<Canvas HorizontalAlignment="Left">
        						<CheckBox x:Name="SelectBox" IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="12,-20,5,0" Visibility="Collapsed" VerticalAlignment="Top">
        							<CheckBox.RenderTransform>
        								<CompositeTransform TranslateX="-58"/>
        							</CheckBox.RenderTransform>
        						</CheckBox>
        					</Canvas>
        				</Grid>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="LongListMultiSelectorItemGridStyle" TargetType="toolkit:LongListMultiSelectorItem">
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="BorderThickness" Value="0"/>
        	<Setter Property="BorderBrush" Value="Transparent"/>
        	<Setter Property="Padding" Value="0"/>
        	<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        	<Setter Property="VerticalContentAlignment" Value="Stretch"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="toolkit:LongListMultiSelectorItem">
        				<Border x:Name="LayoutRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
        					<VisualStateManager.VisualStateGroups>
        						<VisualStateGroup x:Name="CommonStates">
        							<VisualState x:Name="Normal"/>
        							<VisualState x:Name="MouseOver"/>
        							<VisualState x:Name="Disabled">
        								<Storyboard>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="LayoutRoot">
        										<DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TransparentBrush}"/>
        									</ObjectAnimationUsingKeyFrames>
        									<DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentContainer"/>
        								</Storyboard>
        							</VisualState>
        						</VisualStateGroup>
        						<VisualStateGroup x:Name="SelectionStates">
        							<VisualState x:Name="Unselected"/>
        							<VisualState x:Name="Selected">
        								<Storyboard>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectionTriangle">
        										<DiscreteObjectKeyFrame KeyTime="0">
        											<DiscreteObjectKeyFrame.Value>
        												<Visibility>Visible</Visibility>
        											</DiscreteObjectKeyFrame.Value>
        										</DiscreteObjectKeyFrame>
        									</ObjectAnimationUsingKeyFrames>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectionCheck">
        										<DiscreteObjectKeyFrame KeyTime="0">
        											<DiscreteObjectKeyFrame.Value>
        												<Visibility>Visible</Visibility>
        											</DiscreteObjectKeyFrame.Value>
        										</DiscreteObjectKeyFrame>
        									</ObjectAnimationUsingKeyFrames>
        								</Storyboard>
        							</VisualState>
        						</VisualStateGroup>
        						<VisualStateGroup x:Name="HasSelectionStates">
        							<VisualState x:Name="Opened">
        								<Storyboard>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectionRectangle">
        										<DiscreteObjectKeyFrame KeyTime="0">
        											<DiscreteObjectKeyFrame.Value>
        												<Visibility>Visible</Visibility>
        											</DiscreteObjectKeyFrame.Value>
        										</DiscreteObjectKeyFrame>
        									</ObjectAnimationUsingKeyFrames>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="OuterCover">
        										<DiscreteObjectKeyFrame KeyTime="0">
        											<DiscreteObjectKeyFrame.Value>
        												<Visibility>Visible</Visibility>
        											</DiscreteObjectKeyFrame.Value>
        										</DiscreteObjectKeyFrame>
        									</ObjectAnimationUsingKeyFrames>
        								</Storyboard>
        							</VisualState>
        							<VisualState x:Name="Closed"/>
        						</VisualStateGroup>
        					</VisualStateManager.VisualStateGroups>
        					<Grid Margin="1">
        						<ContentControl x:Name="ContentContainer" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="3" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
        						<Rectangle x:Name="SelectionRectangle" Stroke="{StaticResource PhoneAccentBrush}" StrokeThickness="2" Visibility="Collapsed"/>
        						<Polyline x:Name="SelectionTriangle" Fill="{StaticResource PhoneAccentBrush}" HorizontalAlignment="Right" Points="50,0 50,50 0,0" Visibility="Collapsed" VerticalAlignment="Top"/>
        						<Polyline x:Name="SelectionCheck" Fill="{StaticResource PhoneForegroundBrush}" HorizontalAlignment="Right" Margin="5" Points="40,0 43,3 28,18 18,8 21,5 28,12" Visibility="Collapsed" VerticalAlignment="Top"/>
        						<Grid x:Name="OuterCover" Background="Transparent" HorizontalAlignment="Stretch" IsHitTestVisible="True" Visibility="Collapsed" VerticalAlignment="Stretch"/>
        					</Grid>
        				</Border>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style TargetType="toolkit:LongListMultiSelector">        	
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="toolkit:LongListMultiSelector">
        				<phone:LongListSelector x:Name="InnerSelector" GroupHeaderTemplate="{TemplateBinding GroupHeaderTemplate}" GridCellSize="{TemplateBinding GridCellSize}" GroupFooterTemplate="{TemplateBinding GroupFooterTemplate}" HideEmptyGroups="{TemplateBinding HideEmptyGroups}" IsGroupingEnabled="{TemplateBinding IsGroupingEnabled}" ItemsSource="{TemplateBinding ItemsSource}" JumpListStyle="{TemplateBinding JumpListStyle}" ListHeaderTemplate="{TemplateBinding ListHeaderTemplate}" ListFooterTemplate="{TemplateBinding ListFooterTemplate}" ListFooter="{TemplateBinding ListFooter}" ListHeader="{TemplateBinding ListHeader}">
        					<phone:LongListSelector.ItemTemplate>
        						<DataTemplate>
        							<toolkit:LongListMultiSelectorItem x:Name="LLSItem" Content="{Binding}" HorizontalContentAlignment="Stretch" Style="{StaticResource LongListMultiSelectorItemListStyle}" VerticalAlignment="Stretch"/>
        						</DataTemplate>
        					</phone:LongListSelector.ItemTemplate>
        				</phone:LongListSelector>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <DataTemplate x:Key="ArticleDynamicTemplate">
            <selectors:ArticleTemplateSelector Content="{Binding}"/>
        </DataTemplate>
    </Application.Resources>

    <Application.ApplicationLifetimeObjects>
        <!--Required object that handles lifetime events for the application-->
        <shell:PhoneApplicationService
            Launching="Application_Launching" Closing="Application_Closing"
            Activated="Application_Activated" Deactivated="Application_Deactivated"/>
    </Application.ApplicationLifetimeObjects>

</Application>